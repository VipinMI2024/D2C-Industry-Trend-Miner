{
  "name": "D2C Industry Trend Miner",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -304,
        -16
      ],
      "id": "daf96e9b-26ef-42a5-bfd8-85a31965a4d7",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "=https://news.google.com/rss/search?q={{$node[\"Params\"].json[\"query\"]}}&hl=en-IN&gl=IN&ceid=IN:en",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        -16,
        -16
      ],
      "id": "2bf529b0-e911-4d26-8647-be9455c3d9d9",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "jsCode": "// Define the parameters\nconst params = {\n  days: 21,          // number of days to look back\n  maxItems: 80,      // maximum articles/items to keep\n  query: 'D2C startups' // your search keyword\n};\n\n// Return the data in the standard n8n item format\nreturn [\n  {\n    json: params\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        192
      ],
      "id": "e59db19f-70fa-4388-8071-dec52f6ea524",
      "name": "Params"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        608,
        -48
      ],
      "id": "9b220061-eced-4857-8044-7a18abf4d4cf",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Function node code (FINAL, v3 with nbsp fix)\nconst input = $input.all();\nlet params = { days: 21, maxItems: 80, query: 'D2C startups' };\nfor (const it of input) {\n  if (it.json && it.json.days) { params.days = it.json.days; params.maxItems = it.json.maxItems || params.maxItems; params.query = it.json.query || params.query; break; }\n}\n\nconst feedItems = [];\nfor (const it of input) {\n  const j = it.json;\n  if (!j || (!j.title && !j.link)) continue;\n  const title = (j.title || '').toString();\n  const link = (j.link || j.url || j.guid || '').toString();\n  const pubDate = j.pubDate ? new Date(j.pubDate) : (j.isoDate ? new Date(j.isoDate) : null);\n  const source = j.creator || j.source || (j.feedTitle) || (link ? (link.split('/')[2] || '') : '');\n  const description = (j.content || j.description || j.summary || j['content:encoded'] || '').toString().replace(/<[^>]*>?/gm, '');\n  feedItems.push({ title, link, pubDate, source, description, raw: j });\n}\n\nconst now = new Date();\nconst earliest = new Date(now.getTime() - (params.days * 24 * 60 * 60 * 1000));\nconst recent = feedItems.filter(f => f.pubDate && f.pubDate >= earliest);\n\nconst seen = new Set();\nconst unique = [];\nfor (const f of recent) {\n  const key = (f.link || f.title).trim();\n  if (!key || seen.has(key)) continue;\n  seen.add(key);\n  unique.push(f);\n  if (unique.length >= params.maxItems) break;\n}\n\n// *** FIXED: Added 'nbsp' (a common HTML space character) to the list of ignored words ***\nconst stopwords = new Set(['the', 'and', 'for', 'with', 'that', 'this', 'from', 'are', 'has', 'have', 'was', 'were', 'will', 'which', 'when', 'what', 'where', 'who', 'how', 'its', 'it', 'in', 'on', 'of', 'to', 'by', 'as', 'at', 'is', 'be', 'an', 'a', 'nbsp']);\nconst tokenCounts = {};\nfunction tokenize(s) {\n  return s.toLowerCase().replace(/[^a-z0-9\\s]/g, ' ').split(/\\s+/).filter(w => w.length > 2 && !stopwords.has(w));\n}\n\nfor (const it of unique) {\n  const textToAnalyze = it.title + ' ' + it.description;\n  for (const t of tokenize(textToAnalyze)) {\n    tokenCounts[t] = (tokenCounts[t] || 0) + 1;\n  }\n}\n\nconst keywordsSorted = Object.keys(tokenCounts).sort((a, b) => tokenCounts[b] - tokenCounts[a]);\nconst numThemes = Math.min(5, Math.max(3, Math.floor(keywordsSorted.length / 10)));\nconst themeSeeds = keywordsSorted.slice(0, numThemes);\n\nlet themes = themeSeeds.map(k => ({ name: k, keywords: [k], items: [] }));\nif (themes.length > 0) {\n    const otherTheme = { name: 'Other', keywords: [], items: [] };\n    for (const it of unique) {\n        const tks = tokenize(it.title + ' ' + it.description);\n        let best = null;\n        let bestScore = 0;\n        for (let i = 0; i < themes.length; i++) {\n            const seed = themes[i].name;\n            let score = 0;\n            if (tks.includes(seed)) score++;\n            if (score > bestScore) {\n                bestScore = score;\n                best = i;\n            }\n        }\n        if (best !== null) themes[best].items.push(it);\n        else otherTheme.items.push(it);\n    }\n    if (otherTheme.items.length > 0) themes.push(otherTheme);\n}\n\n\nfunction sentimentScore(text) {\n  const pos = ['gain', 'rise', 'raise', 'growth', 'invest', 'fund', 'profit', 'expand', 'positive', 'win', 'boost', 'launch', 'upgrade', 'record'];\n  const neg = ['drop', 'decline', 'layoff', 'loss', 'fraud', 'tax', 'problem', 'concern', 'hit', 'cuts', 'regret', 'scam', 'penalty'];\n  const t = tokenize(text);\n  let s = 0;\n  for (const w of t) {\n    if (pos.includes(w)) s += 1;\n    if (neg.includes(w)) s -= 1;\n  }\n  return s;\n}\n\nfunction computeTrajectory(items) {\n  if (items.length < 2) return 'steady';\n  const sorted = items.map(i => i).sort((a, b) => a.pubDate - b.pubDate);\n  const half = Math.ceil(sorted.length / 2);\n  const first = sorted.slice(0, half).length;\n  const second = sorted.slice(half).length;\n  if (first === 0) return 'rising';\n  const pct = ((second - first) / Math.max(1, first)) * 100;\n  if (pct >= 20) return 'rising';\n  if (pct <= -20) return 'falling';\n  return 'steady';\n}\n\nlet themesOut = themes.map(th => {\n  const scores = th.items.map(it => sentimentScore(it.title));\n  const avgScore = scores.length ? (scores.reduce((a, b) => a + b, 0) / scores.length) : 0;\n  const tone = avgScore > 0.5 ? 'positive' : (avgScore < -0.5 ? 'negative' : 'neutral');\n  return {\n    name: th.name,\n    volume: th.items.length,\n    trajectory: computeTrajectory(th.items),\n    tone,\n    avgSentimentScore: avgScore,\n    keywords: th.keywords,\n    sample: th.items.slice(0, 5).map(i => ({ title: i.title, link: i.link, source: i.source, pubDate: i.pubDate }))\n  };\n});\n\n// FALLBACK SYSTEM\nif (themesOut.length === 0 && unique.length > 0) {\n    themesOut = [{\n        name: \"General Keywords\",\n        volume: unique.length,\n        trajectory: 'steady',\n        tone: 'neutral',\n        avgSentimentScore: 0,\n        keywords: keywordsSorted.slice(0, 15),\n        sample: unique.slice(0, 5).map(i => ({ title: i.title, link: i.link, source: i.source, pubDate: i.pubDate }))\n    }];\n}\n\nconst annotated = unique.map(it => {\n  let assigned = 'Other';\n  for (const th of themesOut) {\n    if (th.sample.find(si => si.link === it.link || si.title === it.title)) {\n      assigned = th.name;\n      break;\n    }\n  }\n  return { ...it, theme: assigned };\n});\n\nfunction generateInsightsMarkdown(themes) {\n  const header = `# INSIGHTS\\nGenerated: ${new Date().toISOString()}\\n\\n`;\n  if (themes.length === 0) return header + \"No significant themes were identified from the articles.\";\n  const sorted = themes.slice().sort((a, b) => b.volume - a.volume);\n  let md = header;\n  for (const t of sorted) {\n    const why = `Why it matters now: ${t.name} shows ${t.trajectory} momentum with ${t.volume} items — watch for short-term impacts on D2C supply/marketing.`;\n    md += `## ${t.name} (${t.trajectory})\\n- Volume: ${t.volume}\\n- Tone: ${t.tone}\\n- Keywords: ${t.keywords.join(', ')}\\n- ${why}\\n- Examples:\\n`;\n    for (const s of t.sample.slice(0, 2)) md += `  - [${s.title}](${s.link}) — ${s.source}\\n`;\n    md += `\\n`;\n  }\n  return md;\n}\n\nreturn [\n  { json: { type: 'dataset', items: annotated } },\n  { json: { type: 'themes', themes: themesOut } },\n  { json: { type: 'INSIGHTS', insightsMarkdown: generateInsightsMarkdown(themesOut) } }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        208
      ],
      "id": "80e8e0bc-de81-40f6-87da-8cc974ac55bc",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Convert themes JSON to string\nreturn [{\n  json: {\n    data: JSON.stringify($json.themes, null, 2)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        -48
      ],
      "id": "6e022ecc-7227-4455-995a-8e593cf0dad8",
      "name": "themes"
    },
    {
      "parameters": {
        "name": "INSIGHTS.md",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1744,
        304
      ],
      "id": "5fa307f1-7956-4ee3-aec3-daf99ff1656b",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "QmPRPwbKULy0no7W",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://yourstory.com/feed",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.2,
      "position": [
        288,
        -32
      ],
      "id": "96b28b1f-17f5-42a7-8628-8522969f5210",
      "name": "RSS Read1"
    },
    {
      "parameters": {
        "maxItems": 100
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        144,
        208
      ],
      "id": "6efe4f23-29ed-4ce3-a72a-5fc7cb044905",
      "name": "Limit"
    },
    {
      "parameters": {
        "maxItems": 300
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        464,
        208
      ],
      "id": "8e17c223-e50c-4982-9e9d-97d0c3e2a42c",
      "name": "Limit1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "971c2c41-a09e-4cba-96b1-60cc2d52d241",
              "leftValue": "={{ $json.type }}",
              "rightValue": "themes",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        928,
        -32
      ],
      "id": "775ba947-a6da-4dfc-ad7d-39e833ed947e",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a6e3506-2bce-4be6-9731-173c075271ea",
              "leftValue": "={{ $json.type }}",
              "rightValue": "dataset",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1040,
        240
      ],
      "id": "dba99633-c422-4524-baa4-1fbef7a421d3",
      "name": "If1"
    },
    {
      "parameters": {
        "options": {
          "headerRow": true
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1584,
        128
      ],
      "id": "c4600c82-e2c1-443d-8f98-e4b6d8851395",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "name": "themes.json",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1680,
        -48
      ],
      "id": "ee677f7b-14d7-4cfc-b41b-7e41f84ada41",
      "name": "Upload file1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "QmPRPwbKULy0no7W",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "={{ JSON.stringify($json.themes, null, 2) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1424,
        -48
      ],
      "id": "4738dab9-1f39-4cf5-ba5c-5bc2848f8438",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "name": "trends.csv",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1728,
        128
      ],
      "id": "53515ad1-c879-457c-b246-d3cad27249ef",
      "name": "Upload file2",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "QmPRPwbKULy0no7W",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toText",
        "sourceProperty": "={{ $json.insightsMarkdown }}",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1424,
        320
      ],
      "id": "97611eaf-3880-44bf-82ea-1072bd89c9b7",
      "name": "Convert to File2"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"parameters\": {\n    \"values\": {\n      \"string\": [\n        {\n          \"name\": \"fileContent\",\n          \"value\": \"={{ $json.insightsMarkdown }}\"\n        }\n      ]\n    },\n    \"keepOnlySet\": true\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1248,
        320
      ],
      "id": "e5241abf-87e3-4de4-b0c1-0814c636dc40",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=items",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1232,
        128
      ],
      "id": "91f8d364-a9da-43d2-9443-ec776ce93cf5",
      "name": "Split Out"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "69a61195-4fbe-4ddb-8037-82541904bff3",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "4c98f6db-a9bf-467d-a3a8-e0ee369d2434",
              "name": "link",
              "value": "={{ $json.link }}",
              "type": "string"
            },
            {
              "id": "a0bc9812-3e22-495a-bfe3-e01c2ce5186b",
              "name": "pubDate",
              "value": "={{ $json.pubDate }}",
              "type": "string"
            },
            {
              "id": "3648e2a3-e7e9-43e2-823b-d65fe0fd04f7",
              "name": "source",
              "value": "={{ $json.source }}",
              "type": "string"
            },
            {
              "id": "711d842b-5c4b-4d65-9e0b-b92e3a227612",
              "name": "description",
              "value": "={{ $json.description }}",
              "type": "string"
            },
            {
              "id": "03032188-08ac-4893-b582-310dc6a82722",
              "name": "theme",
              "value": "={{ $json.theme }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1424,
        128
      ],
      "id": "abba97d9-5869-4ef4-8998-e094c1934623",
      "name": "Edit Fields1"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Params": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "themes": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read1": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS Read1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "themes",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Upload file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Upload file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File2": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "008ab31a-5d4a-491f-b099-6368c49b6e54",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "477245408a58b3fede6174e426631e941fb80a645b2a97bf185984375c694c3d"
  },
  "id": "UnsD0N5B0FF6au5c",
  "tags": []
}